//c++ program
#include<iostream>
using namespace std;
class Node{
  public:
  int data;
  Node* next;
};
void print(Node* head)
{
    if(head==NULL)
    {
        cout<<"EMPTY"<<endl;
        return;
    }
    while(head!=NULL)
    {
        cout<<head->data<<" ";
        head=head->next;
    }
    cout<<endl;
    return;
}
void addnode(Node* &head,int data)
{
      Node* temp=new Node;
        temp->data=data;
        temp->next=NULL;
    if(head==NULL)
    {
       head=temp;
        return;
    }
    Node* t=head;
    while(t->next!=NULL)
    {
        t=t->next;
    }
    t->next=temp;
    return;
}
void deletenode(Node* &head,int data)
{
    if(head==NULL)
    {
        return; 
    }
    if(head->data==data)
    {
        Node* t=head;
        if(head->next==NULL)
        {
            head=NULL;
        }
        else head=head->next;
        delete t;
        return;
    }
    Node* temp=head;
    Node *prev=NULL;
    while( temp!=NULL && temp->data!=data)
    {
        prev=temp;
        temp=temp->next;
    }
    if(temp==NULL)
    return;
    if(temp->next==NULL)
    {
        Node* t=temp;
         delete t;
        prev->next=NULL;
    }
    else{
        Node* t=temp;
        prev->next=temp->next;
        delete t;
        
    }
    return;
    
}
int main()
 {
	//code
	int t;
	cin>>t;
	while(t--)
	{
	  long int n,q;
	    cin>>n>>q;
	    int arr[2*q];
	    for(int i=0;i<2*q;i++)
	    {
	        cin>>arr[i];
	    }
	    Node* unread=new Node;
	    Node* read=NULL;
	    Node* trash=NULL;
	    unread->data=1;
	    unread->next=NULL;
	    Node* temp=unread;
	    for(int i=2;i<=n;i++)
	    {
	        Node* t=new Node;
	        t->data=i;
	        t->next=NULL;
	        temp->next=t;
	        temp=temp->next;
	    }
	    for(int i=0;i<2*q;i=i+2)
	    {
	        int data=arr[i+1];
	        switch(arr[i])
	        {
	        case 1:
	        deletenode(unread,data);
	        addnode(read,data);
	        break;
	        case 2:
	        deletenode(read,data);
	        addnode(trash,data);
	        break;
	        case 3:
	        deletenode(unread,data);
	        addnode(trash,data);
	        break;
	        case 4:
            deletenode(trash,data);
	        addnode(read,data);
	        break;
	        
	        }
	    }  
	    print(unread);
	    print(read);
	    print(trash);
	}
	return 0;
}
